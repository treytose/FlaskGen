################## Initial Setup Guide ##################
1. Install MariaDB
2. Create a python3.9+ environment
3. Run the following commands to allow the installation of mysqlclient:
    sudo yum install -y python36-devel mysql-devel gcc
    sudo ln -s /usr/lib64/libmariadbclient.a /usr/lib64/libmariadb.a
    pip install mysqlclient
4. pip install the requirements.txt file 
5. Edit the config file as necessary
6. Setup version control


################# Unit Testing ###############
run tests with command: python -m unittest discover -s tests -p '*_test.py'

################ Deployment Guide #################
1. pip install gunicorn

2. create a systemd service file to run your app with gunicorn
    [Unit]
    Description=Trisoft Web Application
    After=network.target

    [Service]
    Type=simple
    User=root
    Environment="PATH=/home/ec2-user/projects/trisoft/venv/bin"
    WorkingDirectory=/home/ec2-user/projects/trisoft
    ExecStart=/path/to/my/app/venv/bin/gunicorn -w 4 -b 0.0.0.0:5000 manage:app

    [Install]
    WantedBy=multi-user.target

3. yum install nginx
4. Configure nginx to handle http port 80 traffic and point to your gunicorn service
    In /etc/nginx/nginx.conf
     server {
        server_name  treytose.com; # This is your domain name
        #root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /404.html;
        location = /404.html {            
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }

        location /static {
            alias /path/to/my/application/app/static; # Tell NGINX where the flask static files are
        }

        location = / {                
            proxy_pass http://localhost:5000; # Reverse proxies to the local gunicorn service 
        }
     
    }

5. Test nginx with: sudo nginx -t
6. Restart the nginx service to apply the changes: sudo systemctl restart nginx
7. At this point your site should be accessible via http://<your_domain>.com

###################### Add HTTPS with TLS/SSL Encryption (LetsEncrypt) (CertBot) #########################
8. Follow the instructions for installing certbot via pip 

    
